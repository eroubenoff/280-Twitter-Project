updateDB <- function(x, pos = 0)  {
suppressWarnings(suppressMessages({
# Arguments are x, pos to be compliant with readr callback. x is the chunk
# and pos is the location (not necessary here)
if (length(x) == 0) {return(NULL)}
# Convert from list of strings to JSON objs
l <- lapply(x, rjson::fromJSON)
# Pull tweet text
tweets <- l %>%
lapply(function(x) {x[c("_id", "user", "full_text")]}) %>%
rbindlist() %>%
as_tibble()
# Pull hashtags (in tidy/long format)
hashtags <- l %>%
lapply(function(x) {x[c("_id", "user", "hashtags")]}) %>%
rbindlist() %>%
as_tibble() %>%
unnest(hashtags)
# Pull coordinates from tweets that have them
points <- l %>%
lapply(function(x) {x[c("_id", "user", "coordinates")]}) %>%
rbindlist() %>%
as_tibble() %>%
filter(coordinates != "Point") %>%
drop_na() %>%
unnest_wider(coordinates)
if (nrow(points) > 0 ){
points <- points %>%
rename(x = 3,  # Select by position (needed some tweaking)
y = 4) %>%
st_as_sf(coords = c("x", "y"))
}
# Pull polygons from tweets that have them
# of course this is the complicated one
places <- l %>%
lapply(function(x) {x[c("_id", "user", "place")]}) %>%
rbindlist() %>%
as_tibble() %>%
drop_na()
# There are multiple attributes for each polygon. As far as I can tell
# they are a unique identifier, an api url location, type, name, location name,
# country abbreviation, country, and list of coordinate bounding box. There
# are 8 fields in total for each.  I will exploit that structure.
if (nrow(places) > 0) {
places.id <- places[seq(1, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.api <- places[seq(2, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.type <- places[seq(3, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.name <- places[seq(4, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.longname <- places[seq(5, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.countryabbr <-  places[seq(6, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.country <- places[seq(7, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
# places.bbox is complicated. Need to remove the odd numbered rows
# and turn into spatial object
places.bbox <-  places[seq(8, nrow(places), by = 8),] %>% unnest(place)
places.bbox  <- places.bbox[seq(2, nrow(places.bbox), by = 2),]
st_geometry(places.bbox) <- lapply(places.bbox %>% pull(place), function(x){
x[[1]] %>%
unlist() %>%
matrix(nrow = 4, ncol = 2, byrow = T) %>%
rbind(.[1,])  %>%
list() %>%
st_polygon()})  %>%
st_sfc() %>%
st_make_valid()
places.bbox <- places.bbox %>% select(-place)
# Join all the places dfs together
places <- cbind(places.bbox, places.id, places.api, places.type, places.name, places.longname, places.countryabbr, places.country)
# Dop the temp objects (not strictly necessary, but neater while debugging)
rm(places.bbox, places.id, places.api, places.type, places.name, places.longname, places.countryabbr, places.country)
}
# browser()
# write tables (non-spatial and spatial need different commands)
dbWriteTable(con, "tweets", tweets, overwrite = FALSE, append = TRUE)
dbWriteTable(con, "hashtags", hashtags, overwrite = FALSE, append = TRUE)
if (nrow(points) > 0 ){
sf::st_write(points, dsn = con, update  = T, append = T)
# sf::dbWriteTable(con, "points", points, append = T, binary = F)
}
if (nrow(places) > 0) {
sf::st_write(places, dsn = con, update  = T, append = T)
# sf::dbWriteTable(con, "places", places, append = T, binary = F)
}
return(NULL)
}))
}
updateDB(test_l[1001:2000])
updateDB(test_l[1001:2000])
updateDB(test_l[1001:2000])
st_read(con, layer = "places") # %>% qtm()
st_read(con, layer = "points") # %>% qtm()
read_lines_chunked(test_l,  SideEffectChunkCallback$new(updateDB), chunk_size = 1000)
st_read(con, layer = "places") # %>% qtm()
st_read(con, layer = "points") # %>% qtm()
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
read_lines_chunked(test_l,  SideEffectChunkCallback$new(updateDB), chunk_size = 1000)
dbReadTable(con, "places")
st_read(con, layer = "places") # %>% qtm()
st_read(con, layer = "points") # %>% qtm()
# # dbRemoveTable(con, "tweets")
# # dbRemoveTable(con, "hashtags")
# # dbRemoveTable(con, "places")
# # dbRemoveTable(con, "points")
#
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets")
st_read(con, layer = "points") # %>% qtm()
dbReadTable(con, "hashtags")
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets")
st_read(con, layer = "points") # %>% qtm()
st_read(con, layer = "points")  %>% qtm()
st_read(con, layer = "places") # %>% qtm()
dbReadTable(con, "hashtags")
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
dbReadTable(con, "hashtags")
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets")
?tryCatch
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
updateDB <- function(x, pos = 0)  {
# suppressWarnings(suppressMessages({
# Arguments are x, pos to be compliant with readr callback. x is the chunk
# and pos is the location (not necessary here)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
print(pos)
if (length(x) == 0) {return(NULL)}
# Convert from list of strings to JSON objs
l <- lapply(x, rjson::fromJSON)
tryCatch({
# Pull tweet text
tweets <- l %>%
lapply(function(x) {x[c("_id", "user", "full_text")]}) %>%
rbindlist() %>%
as_tibble()
# Pull hashtags (in tidy/long format)
hashtags <- l %>%
lapply(function(x) {x[c("_id", "user", "hashtags")]}) %>%
rbindlist() %>%
as_tibble() %>%
unnest(hashtags)
# Pull coordinates from tweets that have them
points <- l %>%
lapply(function(x) {x[c("_id", "user", "coordinates")]}) %>%
rbindlist() %>%
as_tibble() %>%
filter(coordinates != "Point") %>%
drop_na() %>%
unnest_wider(coordinates)
if (nrow(points) > 0 ){
points <- points %>%
rename(x = 3,  # Select by position (needed some tweaking)
y = 4) %>%
st_as_sf(coords = c("x", "y"))
}
# Pull polygons from tweets that have them
# of course this is the complicated one
places <- l %>%
lapply(function(x) {x[c("_id", "user", "place")]}) %>%
rbindlist() %>%
as_tibble() %>%
drop_na()
# There are multiple attributes for each polygon. As far as I can tell
# they are a unique identifier, an api url location, type, name, location name,
# country abbreviation, country, and list of coordinate bounding box. There
# are 8 fields in total for each.  I will exploit that structure.
if (nrow(places) > 0) {
places.id <- places[seq(1, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.api <- places[seq(2, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.type <- places[seq(3, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.name <- places[seq(4, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.longname <- places[seq(5, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.countryabbr <-  places[seq(6, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
places.country <- places[seq(7, nrow(places), by = 8),] %>%
unnest(place) %>%
pull(place)
# places.bbox is complicated. Need to remove the odd numbered rows
# and turn into spatial object
places.bbox <-  places[seq(8, nrow(places), by = 8),] %>% unnest(place)
places.bbox  <- places.bbox[seq(2, nrow(places.bbox), by = 2),]
st_geometry(places.bbox) <- lapply(places.bbox %>% pull(place), function(x){
x[[1]] %>%
unlist() %>%
matrix(nrow = 4, ncol = 2, byrow = T) %>%
rbind(.[1,])  %>%
list() %>%
st_polygon()})  %>%
st_sfc() %>%
st_make_valid()
places.bbox <- places.bbox %>% select(-place)
# Join all the places dfs together
places <- cbind(places.bbox, places.id, places.api, places.type, places.name, places.longname, places.countryabbr, places.country)
# Dop the temp objects (not strictly necessary, but neater while debugging)
rm(places.bbox, places.id, places.api, places.type, places.name, places.longname, places.countryabbr, places.country)
}
# browser()
# write tables (non-spatial and spatial need different commands)
dbWriteTable(con, "tweets", tweets, overwrite = FALSE, append = TRUE)
dbWriteTable(con, "hashtags", hashtags, overwrite = FALSE, append = TRUE)
if (nrow(points) > 0 ){
sf::st_write(points, dsn = con, update  = T, append = T)
# sf::dbWriteTable(con, "points", points, append = T, binary = F)
}
if (nrow(places) > 0) {
sf::st_write(places, dsn = con, update  = T, append = T)
# sf::dbWriteTable(con, "places", places, append = T, binary = F)
}
},
warning = function(w) {print(w)},
error = function(e) {print(e)},
finally = {return(NULL)} )
# }))
}
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
?dbconnect
?dbConnect
?next
?stop
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
Sys.time(())
Sys.time()
closeAllConnections()
dbListConnections(drv)
closeAllConnections()
dbListConnections(drv)
?dbDisconnect
closeAllConnections(drv)
dbDisconnect(con)
dbListConnections(drv)
?closeAllConnections
showConnections()
showConnections(all = T)
drv <- dbDriver("PostgreSQL")
drv <- dbDriver("PostgreSQL")
showConnections(all = T)
?on.exit
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
on.exit(dbDisconnect(con))
dbListConnections()
dbListConnections(con)
dbListConnections(drv)
dbDisconnect(con)
dbListConnections(drv)
?require
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
library(RPostgreSQL)
library(rjson)
library(tidyverse)
library(data.table)
library(sf)
library(readr)
library(tmap)
library(lwgeom) # for fixing broken polygons
library(tictoc)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
pw <- scan("./pw.txt", what = "character")
print("Starting script at ")
print(Sys.time())
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
rm(list=ls())
?lag
pw <- scan("./pw.txt", what = "character")
message("Starting script at ", Sys.time())
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
dbRemoveTable(con, "tweets")
dbRemoveTable(con, "hashtags")
dbRemoveTable(con, "places")
dbRemoveTable(con, "points")
on.exit({
lapply(dbListConnections(drv = drv), function(x) {
dbDisconnect(conn = x)})
})
lapply(dbListConnections(drv = drv), function(x) {
dbDisconnect(conn = x)})
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets", query = "SELECT TOP 10")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets", query = "SELECT TOP 10")
?dbReadTable
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ethandb",
host = "localhost", port = 5433,
user = "eroubenoff", password = pw)
# list fields
# dbListFields(con, "tweets")
# dbListFields(con, "hashtags")
# dbListFields(con, "places")
# dbListFields(con, "points")
#
# # Read a table
dbReadTable(con, "tweets")
dbListFields(con, "tweets")
dbListFields(con, "hashtags")
dbListFields(con, "places")
dbListFields(con, "points")
# Practice Query
dbSendQuery(con, "SELECT * FROM TWEETS TOP 10")
# Practice Query
dbSendQuery(con, "SELECT TOP 10 * FROM TWEETS")
# Practice Query
dbSendQuery(con, "SELECT * FROM TWEETS LIMIT 10")
# Practice Query
res <- dbSendQuery(con, "SELECT * FROM TWEETS LIMIT 10")
dbFetch(res)
dbClearResult()
?dbClearResult
dbClearResult(res)
dbDisconnect()
dbDisconnect(con)
dbListResults()
dbClearResult(dbListResults(con)[[1]])
# Practice Query
res <- dbSendQuery(con, "SELECT * FROM TWEETS LIMIT 10")
dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT COUNT(*) FROM tweets")
dbFetch(res)
dbClearResult(res)
# Select top 10 most freqent hashtags and return tweets that contain them
q <- "
SELECT hashtags, COUNT(*)
FROM tweets
Group By hashtags"
rest <- dbSendQuery(con, q)
# Select top 10 most freqent hashtags and return tweets that contain them
q <- "
SELECT hashtags, COUNT(*)
FROM hashtags
Group By hashtags"
res <- dbSendQuery(con, q)
dbFetch(res)
dbClearResult(res)
# Select top 10 most freqent hashtags and return tweets that contain them
q <- "
SELECT hashtags, COUNT(*)
FROM hashtags
Group By hashtags
ORDER count ASC"
res <- dbSendQuery(con, q)
# Select top 10 most freqent hashtags and return tweets that contain them
q <- "
SELECT hashtags, COUNT(*)
FROM hashtags
GROUP BY hashtags
ORDER BY count ASC"
res <- dbSendQuery(con, q)
dbFetch(res)
dbClearResult(res)
# Select top 10 most freqent hashtags and return tweets that contain them
q <- "
SELECT hashtags, COUNT(*)
FROM hashtags
GROUP BY hashtags
ORDER BY count DESC"
res <- dbSendQuery(con, q)
dbFetch(res)
dbClearResult(res)
# Select top 10 most freqent hashtags and return tweets that contain them
q <- "
SELECT hashtags, COUNT(*)
FROM hashtags
GROUP BY hashtags
ORDER BY count DESC
LIMIT 10"
res <- dbSendQuery(con, q)
dbFetch(res)
dbClearResult(res)
dbDisconnect(con)
